version: '3.9'
name: poll_system_redis

services:
  postgres:
    image: postgres:14-alpine
    container_name: postgres_db_poll
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: "pg_isready -U ${POSTGRES_USER}"
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - ./db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - poll_network

  redis:
    image: redis:7-alpine
    container_name: redis_server_poll
    restart: always
    ports:
      - "6379:6379"
    networks:
      - poll_network

  redisinsight:
    image: redis/redisinsight:2.68
    container_name: redis_insight_poll
    depends_on:
      - redis
    restart: always
    ports:
      - "5540:5540"
    networks:
      - poll_network

  django:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django_app_poll
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./app:/app
      - ./seed-data/polls.csv:/app/polls.csv
    ports:
      - "8000:8000"
    env_file:
      - .env
    networks:
      - poll_network
    command: >
      sh -c "
        until pg_isready -h postgres -p 5432 -U postgres; do
          echo 'Waiting for PostgreSQL to be ready...';
          sleep 2;
        done &&
        echo 'PostgreSQL is ready' &&
        python manage.py makemigrations app_polls &&
        python manage.py migrate &&
        python manage.py load_polls &&
        python manage.py shell -c \"from django.contrib.auth.models import User; User.objects.filter(username='admin').exists() or User.objects.create_superuser('admin', 'admin@admin.com', 'admin')\" &&
        python manage.py collectstatic --noinput &&
        uvicorn A_core.asgi:application --host 0.0.0.0 --port 8000 --reload
      "


networks:
  poll_network:
    driver: bridge


# version: '3.9'
# name: poll_system_redis

# services:
#   postgres:
#     image: postgres:14-alpine
#     container_name: postgres_db_poll
#     restart: always
#     env_file:
#       - .env
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_DB: ${POSTGRES_DB}
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
#       interval: 5s
#       timeout: 3s
#       retries: 10
#     volumes:
#       - ./db-data:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
#     networks:
#       - poll_network

#   redis:
#     image: redis:7-alpine
#     container_name: redis_server_poll
#     restart: always
#     ports:
#       - "6379:6379"
#     networks:
#       - poll_network

#   redisinsight:
#     image: redis/redisinsight:2.68
#     container_name: redis_insight_poll
#     depends_on:
#       - redis
#     restart: always
#     ports:
#       - "5540:5540"
#     networks:
#       - poll_network

#   django:
#     build: .
#     container_name: django_app_poll
#     restart: always
#     depends_on:
#       postgres:
#         condition: service_healthy
#       redis:
#         condition: service_started
#     volumes:
#       - ./app:/app
#       - ./seed-data/polls.csv:/app/polls.csv
#     ports:
#       - "8000:8000"
#     env_file:
#       - .env
#     networks:
#       - poll_network
#     command: >
#       sh -c "
#         until pg_isready -h postgres -p 5432 -U postgres; do
#           echo 'Waiting for PostgreSQL to be ready...';
#           sleep 2;
#         done &&
#         echo 'PostgreSQL is ready' &&
#         python manage.py makemigrations app_polls &&
#         python manage.py migrate &&
#         python manage.py load_polls &&
#         python manage.py shell -c \"from django.contrib.auth.models import User; User.objects.filter(username='admin').exists() or User.objects.create_superuser('admin', 'admin@admin.com', 'admin')\" &&
#         python manage.py collectstatic --noinput &&
#         uvicorn A_core.asgi:application --host 0.0.0.0 --port 8000 --reload
#       "

# networks:
#   poll_network:
#     driver: bridge

# #     # command: >
# #     #       sh -c "
# #     #         for i in {1..30}; do
# #     #           if pg_isready -h postgres -p 5432 -U postgres; then
# #     #             echo 'PostgreSQL is ready';
# #     #             break;
# #     #           fi;
# #     #           echo 'Waiting for PostgreSQL to be ready...';
# #     #           sleep 2;
# #     #         done &&
# #     #         python manage.py migrate &&
# #     #         python manage.py makemigrations app_polls &&
# #     #         python manage.py migrate &&
# #     #         python manage.py load_polls &&
# #     #         python manage.py shell -c \"
# #     #           from django.contrib.auth.models import User;
# #     #           if not User.objects.filter(username='admin').exists():
# #     #             User.objects.create_superuser('admin', 'admin@admin.com', 'admin');
# #     #         \" &&
# #     #         python manage.py collectstatic --noinput &&
# #     #         uvicorn A_core.asgi:application --host 0.0.0.0 --port 8000 --reload
# #     #       "

# #     # command: >
# #     #       sh -c "
# #     #           if python manage.py shell -c 'from django.contrib.auth.models import User; print(User.objects.filter(username=\"admin\").exists())' | grep -q 'True'; then
# #     #             echo 'Admin user exists, skipping app and database setup ...' 
# #     #             # python manage.py makemigrations && 
# #     #             # python manage.py migrate &&
# #     #             # python manage.py makemigrations 
# #     #           else
# #     #             rm -f app_polls/migrations/0001_initial.py &&
# #     #             python manage.py migrate && 
# #     #             python manage.py makemigrations &&
# #     #             python manage.py migrate app_polls --fake &&
# #     #             python manage.py shell -c 'from django.contrib.auth.models import User; User.objects.create_superuser(\"admin\", \"admin@admin.com\", \"admin\");' ;
# #     #           fi &&
# #     #           echo 'Cleaning and collecting static files ... ' &&
# #     #           rm -rf static &&
# #     #           python manage.py collectstatic --noinput && 
# #     #           uvicorn A_core.asgi:application --host 0.0.0.0 --port 8000 --reload
# #     #         "


# # networks:
# #   poll_network:
# #     driver: bridge