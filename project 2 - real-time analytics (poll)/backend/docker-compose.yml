name: Redis-In-Action-poll

services:
  postgres:
    image: postgres:17.4-alpine3.21
    container_name: postgres_db_poll
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    # volumes:
    #   # Copies your local init.sql file into a special directory inside the container.
    #   # It will automa tically execute this script the first time the container runs. You can use it to create tables, insert data, or run other setup commands.
    #   - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    #   - ./db_data:/data
    ports:
      - "5432:5432"

  redis:
    image: redis:alpine3.20
    container_name: redis_server_poll
    restart: always
    ports:
      - "6379:6379"
  
  redisinsight:
    image: redis/redisinsight:2.68
    container_name: redis_insight_poll
    depends_on:
      - redis
    restart: always
    ports:
      - "5540:5540"
    
  django:
    build: .
    container_name: django_app_poll
    restart: always
    depends_on:
      - postgres
      - redis
    volumes:
      - ./app:/app
    ports:
      - "8000:8000"
    environment:
      - DB_NAME=poll
      - DB_USER=postgres
      - DB_PASSWORD=postgresql
      - DB_HOST=postgres
      - DB_PORT=5432
    command: >
          sh -c "
              if python manage.py shell -c 'from django.contrib.auth.models import User; print(User.objects.filter(username=\"admin\").exists())' | grep -q 'True'; then
                echo 'Admin user exists, skipping app and database setup' &&
                python manage.py makemigrations && 
                python manage.py migrate &&
                python manage.py makemigrations 
              else
                rm -f app_polls/migrations/0001_initial.py &&
                python manage.py makemigrations && 
                python manage.py migrate &&
                python manage.py makemigrations &&
                python manage.py shell -c 'from django.contrib.auth.models import User; User.objects.create_superuser(\"admin\", \"admin@admin.com\", \"admin\");' ;
              fi &&
              echo 'Cleaning and collecting static files ... ' &&
              rm -rf static &&
              python manage.py collectstatic --noinput && 
              uvicorn A_core.asgi:application --host 0.0.0.0 --port 8000 --reload
            "
